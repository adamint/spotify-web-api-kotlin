buildscript {
    ext.kotlin_version = '1.3.50'
    ext.dokka_version = '0.10.0'
    ext.junit_version = '5.5.1'
    ext.moshi_version = '1.8.0'
    ext.json_version = '20190722'
    ext.google_http_client_version = '1.32.1'
    ext.spek_version = '2.0.8'

    repositories { jcenter() }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.25.0"
    id "base"
    id "io.codearte.nexus-staging" version "0.21.1"
    id "com.bmuschko.nexus" version "2.3.1"
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

group 'com.adamratzman'
version '3.0.0-rc.2'

archivesBaseName = 'spotify-api-kotlin'

repositories {
    jcenter()
}

dependencies {
    // Actual library dependencies
    compile 'com.neovisionaries:nv-i18n:1.26'

    compile "com.squareup.moshi:moshi:$moshi_version"
    compile "com.squareup.moshi:moshi-kotlin:$moshi_version"
    compile "org.json:json:$json_version"

    compile "com.google.http-client:google-http-client:$google_http_client_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Spek testing requirements
    testCompile("org.spekframework.spek2:spek-dsl-jvm:$spek_version") {
        exclude group: 'org.jetbrains.kotlin'
    }

    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$spek_version") {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testCompile "com.google.code.gson:gson:2.8.6"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = 'docs'

    configuration {
        jdkVersion = 8
        includeNonPublic = false
        impliedPlatforms = ["JVM"]

        sourceLink {
            path = "src/main/kotlin"
            url = "https://github.com/adamint/spotify-web-api-kotlin/tree/master/src/main/kotlin"
            lineSuffix = "#L"
        }

        externalDocumentationLink {
            url = new URL("https://adamint.github.io/spotify-web-api-kotlin/")
        }
    }
}

spotless {
    kotlin {
        ktlint()
        licenseHeader '/* Spotify Web API - Kotlin Wrapper; MIT License, 2019; Original author: Adam Ratzman */'
        // License header
    }
}

test {
    systemProperties project.properties.subMap(
            ["clientId", "clientSecret", "spotifyTokenString", "spotifyRedirectUri"]
    )
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

modifyPom {
    project {
        name 'spotify-api-kotlin'
        description 'A Kotlin wrapper for the Spotify Web API.'
        url 'https://github.com/adamint/spotify-web-api-kotlin'
        inceptionYear '2018'
        scm {
            url 'https://github.com/adamint/spotify-web-api-kotlin'
            connection 'scm:https://github.com/adamint/spotify-web-api-kotlin.git'
            developerConnection 'scm:git://github.com/adamint/spotify-web-api-kotlin.git'
        }
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'adamratzman'
                name 'Adam Ratzman'
                email 'adam@adamratzman.com'
            }
        }
    }
}
extraArchive {
    sources = true
    tests = true
    javadoc = true
}
nexus {
    sign = true
    repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
}

nexusStaging {
    packageGroup = "com.adamratzman"
}
